create database Filme; 



use Filme;



create table Filme (


ID_Filme int primary key,

Titulo varchar (100),

Genero varchar (100),

Diretor varchar (100)
);



select * from Filme; 

insert into Filme values 

(1, 'A Volta dos que Não Foram', 'Ação', 'Adriano Stanieck'),

(2, 'Incendio na Caixa d´Agua', 'Ação/Aventura', 'Marcela Konoha'),

(3, 'A trança do Rei Careca', 'Comedia/Ação/Aventura', 'Adriano Klabin'),

(4, 'A Volta dos mortos', 'Ação', 'Billie Ramon'),

(5, 'De volta á você', 'Romance', 'Renato Sodré'),

(6, 'Ordem Negativa', 'Suspense/Ação', 'Marcio Donato'),

(7, 'Um dia como Babá', 'Comedia/Ação', 'Álvaro Monte'),

(8, 'O Evangelho de João', 'Religioso/Suspense', 'Erick La Vozie'),

(9, 'O novo Mundo', 'Ficção cientifica', 'Larissa Simões'),

(10, 'De Volta a Terra', 'Ação/Suspense/Comedia', 'Camila Anderson'),

(11, 'Fast and Furious', 'Ação/Aventura', 'Daniel Cabromi');

insert into Filme values 

(12, 'Fast and Furios 7', '', '');



insert into Filme (Titulo, ID_Filme) values 

('She is Crazy', 13);



insert into Filme (ID_Filme, Titulo) values

(14, 'He and She'),

(15, 'Carga Explosiva'),

(16, 'Velocidade Maxíma'),

(17, 'Caçada Mortal'),

(18, 'Perdedores'),

(19, 'Missão Impossível');

select * from Filme;



update Filme set Diretor = 'Leticia Almeida' where ID_Filme = 5;



update Filme set Diretor = 'Gabriel Cardoso' where ID_Filme = 6 or ID_Filme = 11;



select * from Filme;  



update Filme set Genero = 'Suspense', Diretor = 'Marcus Vinicius' where ID_Filme = 4 or ID_Filme = 9;



update Filme set Genero = 'Suspense' where ID_Filme = 5 or ID_Filme = 6;



select * from Filme;



update Filme set  Genero = 'Ação/Aventura' where ID_Filme = 2 or ID_Filme = 11;



update Filme set Diretor = 'Ariana Sodré' where ID_Filme = 2;



update Filme set Genero = 'Romance', Diretor = 'Samuel Navarro' where ID_Filme = 3 or ID_Filme = 7 or ID_Filme = 8;



update Filme set Genero = 'Ficção cientifica' where ID_Filme = 10;



select * from Filme;


delete from Filme where ID_Filme = 6;



delete from Filme where ID_Filme = 11 or ID_Filme = 5; 



alter table Filme add Ano varchar (100); 
 
 

select * from Filme;
 
 

alter table Filme modify Titulo varchar(50);
 
 

select * from Filme;
 
 

alter table Filme drop column Ano;



select Titulo from Filme;



select Diretor from Filme; 



select * from Filme order by Diretor desc;



---- PARTE DOIS DO EXERCICIO -----



create table Atores (


ID_Ator int primary key auto_increment,

Nome varchar(100),

DataNasc date -- Campo dataNesc tem tipo date

);



select * from Atores;




insert into Atores (Nome, DataNasc) values 

('Marcus Vinicius','1998-07-28'),

('Felipe Santana','2002-01-02'),

('Leticia Alves','1978-04-14');



alter table Atores auto_increment = 20;



insert into Atores (Nome, DataNasc) values

('Paul Walker','1889-10-12');



insert into Atores (Nome, DataNasc) values

('Dominic Toretto','1878-12-10');



select * from Atores;

create table Dubladores (

ID_Dublador int primary key auto_increment,

Nome varchar(100),

Linguagem varchar(50),

TempoLivre time
) auto_increment = 9999;



select * from Dubladores;

insert into Dubladores (Nome, Linguagem, TempoLivre) values

('Richard Melon','Inglês','03:00:00'),

('Mark Stanieck','Russo','02:00:00'),

('Chris Evans','Francês','00:40:00'),

('Natasha Romanoff','Inglês','03:00:00');



insert into Dubladores (Nome, Linguagem, TempoLivre) values

('Michael Jackson','Português','1');



select Nome as Nome_Dublador  from Dubladores;

----- NOVO CONTEUDO -----

create database Faculdade;



use Faculdade; 


create table Aluno (

ID_Aluno int primary key auto_increment,
Nome varchar(100),

Bairro varchar(100)

);



insert into Aluno (Nome, Bairro) value 

('Gabriel','Imirim'),

('Marcus','Pery alto'),

('Leticia','Limão'),

('André','Vila do sapo'),

('Emilly','Alphaville');



alter table Aluno add column ID_Curso int;


alter table Aluno add foreign key(ID_Curso) references Curso(ID_Curso);


update Aluno set ID_Curso =  101 where ID_Aluno in (2,3,4);



update Aluno set ID_Curso = 100 where ID_Aluno in (1,5);


select * from Aluno as a, Curso as c where a.ID_Curso = c.ID_Curso;


select a.*,c.Curso, Coordenador from Aluno as a, Curso as c where a.ID_Curso = c.ID_Curso and c.Curso = 'ADS';



select * from Aluno;



create table Curso (

ID_Curso int primary key auto_increment,

Curso varchar(50),

Coordenador varchar(50) 

) auto_increment = 100;


insert into Curso (Curso, Coordenador) values 

('ADS','Leo'),

('CCO','Maria');


select * from Curso;

select * from Aluno, Curso where Aluno.ID_Curso = Curso.ID_Curso;


-- Cria o banco de dados (schema) chamado adsb
create database adsb;
-- Seleciona o banco de dados adsb
use adsb;

-- Cria a tabela Aluno, com os campos ra, nome, bairro
-- O campo ra é a chave primária da tabela
-- ra vai conter dados numéricos inteiros
-- nome e bairro conterão dados caracteres
create table Aluno (
  ra int primary key,
  nome varchar(30),
  bairro varchar(20) 
);

-- Exibe todas as colunas (e todas as linhas) da tabela Aluno
select * from Aluno;
-- MySQL não distingue letra maiúscula de letra minúscula
select * from aluno;

-- Insere dados de um aluno na tabela Aluno
insert into Aluno 
  values (01191016,'Marcos Paulo','Vila Primavera');

-- Insere os dados de vários alunos
insert into Aluno values
   (01191026,'Gabriel Domingos','Jd Sta Edwiges'),
   (01191023,'Jennifer Januario','Interlagos'),
   (01191037,'Leonardo Melo','Jd Lenise'),
   (01191059,'Livia Monteiro','Sao Jose'),
   (01191004,'Luis Fernando','Imirim');

-- Seleciona todos as colunas da tabela Aluno
select * from Aluno;

-- Seleciona apenas a coluna nome da tabela Aluno
select nome from Aluno;

-- Seleciona as colunas ra e bairro da tabela Aluno
select ra,bairro from Aluno;

-- Selecionar os dados apenas do aluno de RA = 01191037
-- where é usado para dizer quais linhas quero selecionar
select * from Aluno where ra = 01191037;

-- Selecionar apenas o nome do aluno de RA = 01191037
select nome from Aluno where ra = 01191037; 

-- Selecionar todos os dados dos alunos cujo RA é maior do que 01191020
select * from Aluno where ra > 01191020;

-- Selecionar todos os dados dos alunos cujo RA é maior ou igual a 01191037
select * from Aluno where ra >= 01191037;

-- Selecionar todos os dados da tabela
select * from Aluno;

-- Exibir os dados em ordem alfabética do nome
select * from Aluno order by nome;

-- Exibir os dados em ordem alfabética do bairro
-- A palavra asc indica que é ordem ascendente, mas é opcional
select * from Aluno order by bairro asc; 

-- Exibir os dados em ordem alfabética inversa
select * from Aluno order by nome desc;

-- Exibir os dados dos alunos cujo nome começa com L
select * from Aluno where nome like 'L%';

-- Exibir os dados dos alunos cujo bairro começa com Jd
select * from Aluno where bairro like 'Jd%';

-- Exibir os dados dos alunos cujo nome termina com o
select * from Aluno where nome like '%o';

-- Exibir os dados dos alunos cujo nome termina com lo, 
-- em ordem alfabética do nome
select * from Aluno where nome like '%lo' order by nome;

-- Exibir todos os dados da tabela 
select * from Aluno;

-- Exibir os dados dos alunos cujo nome tenha a letra e
-- como segunda letra
select * from Aluno where nome like '_e%';

-- Exibir os dados dos alunos cujo nome tenha a letra n
-- como terceira letra
select * from Aluno where nome like '__n%';

-- Exibir os dados dos alunos cujo bairro tenha a letra o como a penúltima letra
select * from Aluno where bairro like '%o_';

-- Exibir os dados dos alunos cujo bairro tenha a letra g como a terceira letra de trás pra frente
select * from Aluno where bairro like '%g__';

-- Exibir os dados dos alunos cujo nome tenha a letra d
select * from Aluno where nome like '%d%';

-- Exibir os dados dos alunos cujo RA seja diferente de 01191026
-- O padrão SQL para sinal de diferente é <>
-- MySQL e SQL Server também aceitam != como sinal de diferente
select * from Aluno where ra <> 01191026;
select * from Aluno where ra != 01191026;

-- Alterar o bairro do aluno 01191004 de Imirim para Paraiso
-- Atenção: se executar apenas update Aluno set bairro = 'Paraiso', vai fazer para todas as linhas da tabela
update Aluno set bairro = 'Paraiso' where ra = 01191004;

-- Exibir todos os dados da tabela (para ver a alteração efetuada)
select * from Aluno;

-- Alterar o bairro do aluno 01191037 para Tatuape e o nome para Leonardo Mello
update Aluno set bairro = 'Tatuape',
                 nome = 'Leonardo Mello'
             where ra = 01191037;

-- Alterar o ra do Aluno 01191037 para 01191038
update Aluno set ra = 01191038 where ra = 01191037; 
            
-- Elimina a tabela Aluno
drop table Aluno;	





create database Funcionario;
use Funcionario;

create table Funcionario (
   idFunc int primary key auto_increment,
   nome varchar(40),
   -- sexo char(1),
   -- check (sexo = 'm' or sexo ='f' or sexo = 'n'),
   -- no MySQL, versões anteriores a 8.0.16, devem usar enum no lugar do check:
   sexo enum('m','f','n'), -- caso versão superior a 8.0.16, comente esta linha
   salario decimal(7,2), -- 7 significa que o número tem 7 digitos, considerando os digitos antes da 
                         -- virgula e os depois
                         -- 2 significa que tem 2 digitos após a vírgula
                         -- decimal(7,2) significa um número do tipo 99999,99
   check (salario > 0),  -- isso não funciona em versões anteriores a 8.0.16 do MySQL
                         -- se fosse nota: check (nota >= 0 and nota <= 10)
   fkSupervisor int,  -- implementação de um relacionamento recursivo um para muitos
   foreign key(fkSupervisor) references Funcionario(idFunc)
) auto_increment = 1000;

select * from Funcionario;
desc Funcionario;
-- o comando a seguir não funciona pois está tentando inserir 'x' para sexo
insert into Funcionario values
    (null, 'Maria Aparecida','x',15000,null);
-- inserção de um funcionário, que não tem supervisor    
insert into Funcionario values
    (null, 'Maria Aparecida','f',15000,null);
select * from funcionario;
-- inserção de mais um funcionário (supervisor deste funcionário será a Maria Aparecida - id 1000)    
insert into Funcionario values
	(null, 'José da Silva','m',5000,1000);
-- inserção de mais um funcionário (supervisor deste funcionário será o José da Silva - id 1001)
insert into Funcionario values
    (null, 'João Oliveira','m',2000,1001);
-- o comando a seguir não funciona pois está tentando inserir salário = 0
insert into Funcionario values
    (null, 'Fulano', 'n', 0, 1000); 
-- o comando a seguir não funciona pois está tentando inserir salário negativo
insert into Funcionario values
    (null, 'Fulano', 'n', -1000, 1000); 
-- Exibir os dados dos funcionários e dos supervisores
-- correspondentes
-- se existissem 2 tabelas, uma Funcionario e outra Supervisor, ficaria assim o comando:
select * from Funcionario, Supervisor where fkSupervisor = idSupervisor;
-- mas como a tabela é a mesma, tanto de Funcionario como de Supervisor, então o certo é:
select * from Funcionario as f, Funcionario as s
        where f.fkSupervisor = s.idFunc;
        
-- Criação da tabela Dependente, que é uma entidade fraca em relação a Funcionario 
create table Dependente (
   fkFunc int,
   foreign key (fkFunc) references Funcionario(idFunc),
   idDep int,
   primary key (fkFunc, idDep),  -- chave primária composta
   nome varchar(40),
   dataNasc date
);
desc dependente;
-- Inserção de dependentes
insert into Dependente values
   (1000, 1, 'Ana', '2012-10-01'),
   (1000, 2, 'Paulo', '2014-03-05'),
   (1001, 1, 'Antônio', '2013-09-06'),
   (1002, 1, 'Clara', '2014-06-01');
-- Exibe a tabela Dependente
select * from Dependente;
-- Exibe os funcionários e seus dependentes
select * from Funcionario, Dependente where fkFunc = idFunc; 
select * from dependente;
select * from Dependente where nome='Paulo';
select * from Dependente where fkFunc=1000 and idDep=2;
update Dependente set nome='Paulo Jonas' where fkFunc=1000 and idDep = 2;